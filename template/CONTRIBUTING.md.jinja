# Contributing

Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.

You can contribute in many ways:

## Types of Contributions

### Report Bugs

{%- if is_open_source %}

Report bugs at https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}/issues.

{%- else %}

Report bugs through your internal issue tracking system.

{%- endif %}

If you are reporting a bug, please include:

* Your operating system name and version.
* Any details about your local setup that might be helpful in troubleshooting.
* Detailed steps to reproduce the bug.

### Fix Bugs

{%- if is_open_source %}

Look through the GitHub issues for bugs. Anything tagged with "bug" and "help wanted" is open to whoever wants to implement it.

{%- else %}

Check the internal issue tracker for bugs that need fixing.

{%- endif %}

### Implement Features

{%- if is_open_source %}

Look through the GitHub issues for features. Anything tagged with "enhancement" and "help wanted" is open to whoever wants to implement it.

{%- else %}

Check the internal roadmap for features that need implementation.

{%- endif %}

### Write Documentation

{{ project_name }} could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.

### Submit Feedback

{%- if is_open_source %}

The best way to send feedback is to file an issue at https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}/issues.

{%- else %}

Submit feedback through your internal channels.

{%- endif %}

If you are proposing a feature:

* Explain in detail how it would work.
* Keep the scope as narrow as possible, to make it easier to implement.
* Remember that this is a volunteer-driven project, and that contributions are welcome!

## Get Started!

Ready to contribute? Here's how to set up `{{ repository_name }}` for local development.

{%- if is_open_source %}

1. Fork the `{{ repository_name }}` repo on GitHub.
2. Clone your fork locally:

   ```bash
   git clone git@github.com:your_name_here/{{ repository_name }}.git
   ```

{%- else %}

1. Clone the repository locally:

   ```bash
   git clone <repository-url>
   ```

{%- endif %}

3. Install your local copy into a development environment:

   ```bash
   cd {{ repository_name }}
   uv sync
   ```
   install pre-commits:

   ```bash
   {%- if hooks_tool == 'pre-commit' %}
   uv run pre-commit install
   {%- elif hooks_tool == 'prek' %}
   uv run prek install
   {%- endif %}
   ```

4. Create a branch for local development:

   ```bash
   git checkout -b name-of-your-bugfix-or-feature
   ```

   Now you can make your changes locally.

5. When you're done making changes, check that your changes pass flake8 and the tests:

   ```bash
   uv run ruff check .
{%- if formatter == 'Ruff-format' %}
   uv run ruff format .
{%- elif formatter == 'Black' %}
   uv run black .
{%- endif %}
   uv run mypy src/{{ package_import_name }}
{%- if use_pytest %}
   uv run pytest
{%- else %}
   uv run python -m unittest discover
{%- endif %}
   ```

6. Commit your changes and push your branch to GitHub:

   ```bash
   git add .
   git commit -m "Your detailed description of your changes."
   git push origin name-of-your-bugfix-or-feature
   ```

7. Submit a pull request through the GitHub website.

## Pull Request Guidelines

Before you submit a pull request, check that it meets these guidelines:

1. The pull request should include tests.
2. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md.
3. The pull request should work for Python {{ python_version }}+. Check the GitHub Actions and make sure that the tests pass for all supported Python versions.

## Tips

{%- if use_pytest %}

To run a subset of tests:

```bash
uv run pytest tests.test_{{ package_import_name }}
```

{%- endif %}

## Deploying

A reminder for the maintainers on how to deploy.

Make sure all your changes are committed (including an entry in HISTORY.md).

Then run:

```bash
uv run invoke release
```

This will build the package and upload it to PyPI{%- if private_package_repository_name %} (or your private repository){%- endif %}.
