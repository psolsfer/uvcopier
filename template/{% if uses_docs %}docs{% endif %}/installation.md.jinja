# Installation

## Using Package Managers

To install {{ project_name }} in your project, choose your preferred package manager:

=== "pip (simple install)"

    ```bash linenums="0"
    pip install {{ package_distribution_name }}
    ```

    The following [pip guide] can help getting started with [pip] usage.

=== ":simple-uv: uv (recommended for new projects)"

    First, install [uv] if you haven't already (for more detailed instructions refer to [uv installation]):

    ```bash linenums="0"
    # Windows (PowerShell)
    powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"

    # Linux/macOS
    curl -LsSf https://astral.sh/uv/install.sh | sh
    ```

    Then create and initialize a new project:

    ```bash linenums="0"
    # Create project directory
    mkdir myproject && cd myproject

    # Initialize project with Python {{ python_version }}
    uv init --python {{ python_version }}

    # Install {{ project_name }}
    uv add {{ package_distribution_name }}
    ```

=== ":simple-poetry: Poetry"

    First, install [Poetry] if you haven't already (for more detailed instructions refer to [Poetry installation]):

    Then create and initialize a new project:

    ```bash linenums="0"
    # Create a new project
    poetry new myproject
    cd myproject

    # Set Python version
    poetry env use {{ python_version }}

    # Install {{ project_name }}
    poetry add {{ package_distribution_name }}
    ```

{%- if private_package_repository_name %}

## Private Repository Installation

This package is hosted on a private repository. To install:

```bash linenums="0"
# With pip
pip install {{ package_distribution_name }} --index-url {{ private_package_repository_url }}

# With uv
uv add {{ package_distribution_name }} --index {{ private_package_repository_name }}
```

{%- endif %}

## Development Installation

To install {{ project_name }} for development:

{%- if is_open_source %}

```bash linenums="0"
git clone https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}.git
cd {{ repository_name }}
uv sync
```

{%- else %}

```bash linenums="0"
# Clone from your internal repository
git clone <your-internal-repo-url>
cd {{ repository_name }}
uv sync
```

{%- endif %}

This command installs all dependencies as specified in `pyproject.toml` and also creates a virtual environment if one doesn't exist.

{%- if is_open_source %}

[GitHub repo]: https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}

{%- endif %}

[pip]: https://pip.pypa.io/en/stable/
[pip guide]: https://pip.pypa.io/en/stable/getting-started/
[Poetry]: https://python-poetry.org/
[Poetry installation]: https://python-poetry.org/docs/#installation
[uv]: https://docs.astral.sh/uv/
[uv installation]: https://docs.astral.sh/uv/getting-started/installation/#installation-methods
