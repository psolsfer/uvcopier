{#- Jinja template for pyproject.toml configuration -#}
{%- set license_classifiers = {
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'BSD-2-Clause': 'License :: OSI Approved :: BSD License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'GPL-3.0': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',
    'MIT': 'License :: OSI Approved :: MIT License',
    'Unlicense': 'License :: OSI Approved :: The Unlicense (Unlicense)',
} -%}
{%- set min_index = all_py_versions.index(python_version) -%}
{%- set supported_versions = all_py_versions[min_index:] -%}

{%- set command_line = command_line_interface|lower -%}

[build-system]
requires = ["uv_build>=0.8.5,<0.9.0"]
build-backend = "uv_build"

[project]
name = "{{ package_distribution_name }}"
version = "{{ version }}"
description = "{{ project_short_description }}"
authors = [
    {name = "{{ full_name.replace('\"', '\\\"') }}", email = "{{ email }}"}
]
readme = "README.md"
keywords = ["{{ package_import_name }}"]
{% if is_open_source -%}
license = "{{ open_source_license }}"
license-files = ["LICENSE"]
{% endif -%}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
{%- if is_open_source %}
    "{{ license_classifiers[open_source_license] }}",
{%- endif %}
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
{%- for v in supported_versions %}
    "Programming Language :: Python :: {{ v }}"{% if not loop.last %},{% endif %}
{%- endfor %}
]
requires-python = ">={{ python_version }},<3.14"
dependencies = [
{%- if command_line == 'click' %}
    "click>=7.0",
{%- elif command_line == 'typer' %}
    "typer>=0.15.0",
{%- endif %}
{%- if with_pydantic_typing %}
    "pydantic>=2.4.0",
{%- endif %}
]

[project.urls]
Homepage = "https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}"
Repository = "https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}"
{%- if uses_readthedocs %}
Documentation = "https://{{ package_distribution_name }}.readthedocs.io"
{%- elif docs == 'Github Pages' %}
Documentation = "https://{{ repository_namespace }}.github.io/{{ repository_name }}/"
{%- endif %}
{%- if is_open_source %}
Issues = "https://{{ repository_provider }}/{{ repository_namespace }}/{{ repository_name }}/issues"
{%- endif %}

[tool.uv]
default-groups = ["dev", "test"{% if uses_docs %}, "docs"{% endif %}]

[dependency-groups]
dev = [
{%- if with_jupyter_lab %}
    "jupyterlab>=3.6.3",
{%- endif %}
    "pip>=23",
    "invoke>=2.2",
    "wheel>=0.41.2",
    "watchdog>=3.0.0",
    "tox>=4.11",
    "tox-gh-actions<4,>=3",
    "tox-uv>1.20",
{%- if uses_docs %}
    "mkdocs>=1.5.3",
    "mkdocs-awesome-pages-plugin>=2.9.2",
    "mkdocs-include-markdown-plugin>=6.0",
    "mkdocs-material>=9.4.2",
    "mkdocs-material-extensions>=1.2",
    "mkdocstrings[python]>=0.23.0",
{%- endif %}
    "mypy>=1.6.0",
{%- if use_pytest %}
    "pytest>=7.4.2",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.1",
{%- endif %}
{%- if formatter == 'Black' %}
    "black>=23.9.0",
{%- endif %}
{%- if hooks_tool == 'pre-commit' %}
    "pre-commit>=3.3.1",
{%- elif hooks_tool == 'prek' %}
    "prek>=0.1.6",
{%- endif %}
    "ruff>=0.8",
{%- if development_environment == "strict" %}
    "safety!=2.3.5,>=2.3.4",
    "typeguard>=4.1.5",
{%- endif %}
    "commitizen>=3.10",
]
test = [
{%- if formatter == 'Black' %}
{%- if with_jupyter_lab %}
    "black[jupyter]>=23.9.0",
{%- else %}
    "black>=23.9.0",
{%- endif %}
{%- endif %}
    "commitizen>=3.10",
    "coverage[toml]>=7.3.1",
    "mypy>=1.6.0",
{%- if hooks_tool == 'pre-commit' %}
    "pre-commit>=3.3.1",
{%- elif hooks_tool == 'prek' %}
    "prek>=0.1.6",
{%- endif %}
{%- if use_pytest %}
    "pytest>=7.4.2",
    "pytest-cov>=4.1.0",
    "pytest-clarity>=1.0.1",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.3.1",
{%- endif %}
    "ruff>=0.8",
{%- if development_environment == "strict" %}
    "safety!=2.3.5,>=2.3.4",
    "typeguard>=4.1.5",
{%- endif %}
    "tox>=4.11",
    "tox-gh-actions<4,>=3",
    "tox-uv>1.20",
]
{%- if uses_docs %}
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-awesome-pages-plugin>=2.9.2",
    "mkdocs-include-markdown-plugin>=6.0",
    "mkdocs-material>=9.4.2",
    "mkdocs-material-extensions>=1.2",
    "mkdocstrings[python]>=0.23.0",
]
{%- endif %}
{%- if has_cli %}

[project.scripts]
{%- if command_line == 'typer' %}
"{{ package_command_line_name }}" = "{{ package_import_name }}.cli:app"
{%- else %}
"{{ package_command_line_name }}" = "{{ package_import_name }}.cli:main"
{%- endif %}
{%- endif %}
{%- if private_package_repository_name %}

[[tool.uv.index]]
name = "{{ private_package_repository_name|lower|replace(' ', '-')|replace('_', '-') }}"
url = "{{ private_package_repository_url }}"
{%- endif %}

[tool.commitizen]
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "{{ version }}"
version_files = [
    "pyproject.toml:version",
    "src/{{ package_import_name }}/__init__.py:__version__"
]

[tool.mypy]
{%- if with_pydantic_typing %}
plugins = "pydantic.mypy"
{%- endif %}
{%- if development_environment == "strict" %}
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
{%- endif %}
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
{%- if development_environment == "strict" and with_pydantic_typing %}

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
{%- endif %}
{%- if use_pytest %}

[tool.coverage.report]
{%- if development_environment == "strict" %}
fail_under = 80
{%- else %}
fail_under = 0
{%- endif %}
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src/{{ package_import_name }}"]

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.pytest.ini_options]
addopts = "--color=yes --doctest-modules --exitfirst --failed-first{% if development_environment == 'strict' %} --strict-config --strict-markers --typeguard-packages={{ package_import_name }}{% endif %} --verbosity=2 --junitxml=reports/pytest.xml"
{%- if development_environment == "strict" %}
filterwarnings = ["error", "ignore::DeprecationWarning"]
{%- endif %}
testpaths = ["src/{{ package_import_name }}", "tests"]
xfail_strict = true
{%- endif %}

[tool.ruff]
fix = true
line-length = 100

[tool.ruff.lint]
{%- if development_environment == "strict" %}
select = ["A", "ASYNC", "B", "BLE", "C4", "C90", "D", "DTZ", "E", "EM", "ERA", "F", "FLY", "G", "I", "ICN", "INP", "ISC", "N", "NPY", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "S", "SIM", "SLF", "T10", "T20", "TCH", "TID", "TRY", "UP", "W", "YTT"]
ignore = ["E501", "ISC001", "RET504", "S101"]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]
{%- else %}
select = ["A", "ASYNC", "B", "C4", "C90", "D", "DTZ", "E", "F", "FLY", "I", "ISC", "N", "NPY", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["E501", "S307", "G010", "PGH003", "RET504", "S101"]
unfixable = ["F401", "F841"]
{%- endif %}

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
{%- if development_environment == "strict" %}

[tool.ruff.lint.pycodestyle]
max-doc-length = 100
{%- endif %}

[tool.ruff.lint.pydocstyle]
convention = "{{ docstring_style|lower }}"
{%- if formatter == 'Ruff-format' %}

[tool.ruff.format]
line-ending = "auto"
{%- elif formatter == 'Black' %}

[tool.black]
line-length = 100
{%- endif %}
