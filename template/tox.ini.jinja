{%- set min_index = all_py_versions.index(python_version) -%}
{%- set selected_versions = all_py_versions[min_index:] -%}
{%- set stable_max_version = selected_versions[-1] %}

[tox]
basepython = python3
isolated_build = True
skip_missing_interpreters = true
envlist =
{%- for v in selected_versions %}
    py{{ v.replace('.', '') }},
{%- endfor %}
    check,
    lint,
{%- if uses_docs %}
    docs,
{%- endif %}
{%- if use_pytest %}
    report
{%- endif %}

[gh-actions]
python =
{%- for v in selected_versions %}
    {{ v }}: py{{ v.replace('.', '') }}{% if loop.last %}, check, lint{% if uses_docs %}, docs{% endif %}{% if use_pytest %}, report{% endif %}{% endif -%}
{% endfor %}

[testenv]
# https://hynek.me/articles/turbo-charge-tox/ explains the inclusion of the next 2 lines
package = wheel
wheel_build_env = .pkg
setenv = PYTHONPATH = {toxinidir}
deps = tox-uv
skip_install = true
allowlist_externals = uv
commands_pre = uv pip install -e. --all-extras --group dev -r ./pyproject.toml -q
commands =
{%- if use_pytest %}
    pytest --basetemp={envtmpdir} --junitxml=reports/pytest-{envname}.xml --cov --cov-append
{%- else %}
    python -m unittest discover
{%- endif %}

{%- if use_pytest %}

[testenv:py{{ stable_max_version.replace('.', '') }}]
description = Run tests with coverage on Python {{ stable_max_version }}
depends = clean
commands =
    pytest --basetemp={envtmpdir} --junitxml=reports/pytest-{envname}.xml --cov --cov-append

{%- endif %}

[testenv:check]
description = Format and check the code base
skip_install = true
{%- if hooks_tool == 'pre-commit' %}
    pre-commit-uv>=4.1.4
commands =
    pre-commit run --all-files --show-diff-on-failure
{%- elif hooks_tool == 'prek' %}
commands =
    prek run --all-files --show-diff-on-failure
{%- endif %}

[testenv:lint]
description = Run all linting/formatting checks
basepython = python{{ stable_max_version }}
commands =
    ruff check src/{{ package_import_name }} tests
{%- if formatter == 'Black' %}
    black --check src/{{ package_import_name }} tests
{%- elif formatter == 'Ruff-format' %}
    ruff format --check src/{{ package_import_name }} tests
{%- endif %}

[testenv:type]
description = Run mypy checks
basepython = python{{ python_version }} {#- # NOTE Use minimum supported version #}
commands =
    mypy --junit-xml reports/mypy.xml src/pyauxlib

{%- if uses_docs %}

[testenv:docs]
description = Build documentation
commands =
    mkdocs build

{%- endif %}
{%- if use_pytest %}

[testenv:report]
description = Generate coverage reports
ignore_errors = True
commands =
    ; coverage combine
    coverage report
    coverage html

[testenv:clean]
description = Clean coverage data
commands =
    coverage erase

{%- endif %}
