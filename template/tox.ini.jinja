{%- set min_index = all_py_versions.index(python_version) -%}
{%- set selected_versions = all_py_versions[min_index:] -%}

[tox]
isolated_build = True
skip_missing_interpreters = true
envlist =
{%- for v in selected_versions %}
    py{{ v.replace('.', '') }},
{%- endfor %}
    check,
    lint,
{%- if uses_docs %}
    docs,
{%- endif %}
{%- if use_pytest %}
    report
{%- endif %}

[gh-actions]
python =
{%- for v in selected_versions %}
    {{ v }}: py{{ v.replace('.', '') }}{% if loop.last %}, check, lint{% if uses_docs %}, docs{% endif %}{% if use_pytest %}, report{% endif %}{% endif %}
{%- endfor %}

[testenv]
# https://hynek.me/articles/turbo-charge-tox/ explains the inclusion of the next 2 lines
package = wheel
wheel_build_env = .pkg
setenv = PYTHONPATH = {toxinidir}
deps = tox-uv
skip_install = true
allowlist_externals = uv
setup_cmd = uv sync
commands =
{%- if use_pytest %}
    pytest --basetemp={envtmpdir}
{%- else %}
    python -m unittest discover
{%- endif %}

{%- if use_pytest %}

[testenv:py313] {# # ??? Should this be updated to 3.14? #}
depends = clean
commands =
    pytest --basetemp={envtmpdir} --cov={{ package_import_name }} --cov-report=xml --cov-report=term-missing --cov-append

[testenv:py315]
description = Experimental Python 3.15 environment
commands_pre =
    python -c "print('Running under experimental Python 3.15 â€” failures are allowed in CI.')"
commands =
    pytest --basetemp={envtmpdir}

{%- endif %}

[testenv:check]
description = Format and check the code base
skip_install = true
deps =
    tox-uv
{%- if hooks_tool == 'pre-commit' %}
    pre-commit-uv>=4.1.4
commands =
    pre-commit run --all-files --show-diff-on-failure
{%- elif hooks_tool == 'prek' %}

commands =
    prek run --all-files --show-diff-on-failure
{%- endif %}

[testenv:lint]
description = Run all linting/formatting checks
basepython = python
deps = tox-uv
commands =
    ruff check src/{{ package_import_name }} tests
{%- if formatter == 'Black' %}
    black --check src/{{ package_import_name }} tests
{%- elif formatter == 'Ruff-format' %}
    ruff format --check src/{{ package_import_name }} tests
{%- endif %}
    mypy src/{{ package_import_name }}

{%- if uses_docs %}

[testenv:docs]
description = Build documentation
deps = tox-uv
commands =
    mkdocs build

{%- endif %}
{%- if use_pytest %}

[testenv:report]
description = Generate coverage reports
deps = tox-uv
commands =
    coverage report || true
    coverage html || true

[testenv:clean]
description = Clean coverage data
deps = tox-uv
commands =
    coverage erase

{%- endif %}
