# This workflow will upload a Python Package using uv when a release or a tag is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Build & Publish Python Package

on:
  push:
    branches: [main]
    tags: ["v*"]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

env:
  PYTHON_VERSION: "{{ python_version }}"

jobs:
  build:
    name: Build & Verify Package
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run linting and type checks
        run: |
          uv run ruff check .
{%- if formatter == 'Ruff-format' %}
          uv run ruff format --check .
{%- elif formatter == 'Black' %}
          uv run black --check .
{%- endif %}
          uv run mypy src/{{ package_import_name }}

{%- if use_pytest %}

      - name: Run tests
        run: uv run pytest

{%- endif %}

      - name: Build package
        run: uv build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

{%- if not private_package_repository_name %}

  release-test-pypi:
    name: Publish to TestPyPI
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build
    environment: test-pypi

    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

{%- endif %}
{%- if is_open_source %}

  github-release:
    name: >-
      Sign the Python distribution with Sigstore
      and upload them to GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ "{{ secrets.GITHUB_TOKEN }}" }}
        run: >-
          gh release create
          "$GITHUB_REF_NAME"
          --repo "$GITHUB_REPOSITORY"
          --notes ""

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ "{{ secrets.GITHUB_TOKEN }}" }}
        run: >-
          gh release upload
          "$GITHUB_REF_NAME" dist/**
          --repo "$GITHUB_REPOSITORY"

{%- endif %}
{%- if not private_package_repository_name %}

  release-pypi:
    name: Publish released package to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: {% if is_open_source %}github-release{% else %}build{% endif %}
    runs-on: ubuntu-latest
    environment: pypi

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

{%- else %}

  publish-private:
    name: Publish to private repository
    if: github.event.action == 'published'
    needs: build
    runs-on: ubuntu-latest
    environment: private-pypi

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Publish to private repository
        run: |
          uv publish dist/* \
            --publish-url "${{ "{{ secrets.PRIVATE_PACKAGE_REPOSITORY_URL }}" }}" \
            --username "${{ "{{ secrets.PRIVATE_REPO_USERNAME }}" }}" \
            --password "${{ "{{ secrets.PRIVATE_REPO_PASSWORD }}" }}"

{%- endif %}
