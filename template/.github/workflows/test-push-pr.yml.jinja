{%- set min_index = all_py_versions.index(python_version) -%}
{%- set selected_versions = all_py_versions[min_index:] -%}

name: Test on push and PR

on:
  push:
    branches: [ main, develop ]
    tags:
      - "v*"
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ "{{ matrix.os }}" }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [
{%- for v in selected_versions %}
          "{{ v }}"{% if not loop.last %},{% endif %}
{%- endfor %}
        ]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python ${{ "{{ matrix.python-version }}" }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ "{{ matrix.python-version }}" }}

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "**/pyproject.toml"

    - name: Install dependencies
      run: uv sync --all-extras

{#- # NOTE These were duplicated in tox.ini
#{%- if use_pytest %}
#
#    - name: Run tests with pytest
#      run: uv run pytest --cov={{ package_import_name }} --cov-report=xml --cov-report=term-missing
#
#{%- else %}
#
#    - name: Run tests with unittest
#      run: uv run python -m unittest discover
#
#{%- endif %}
#
#    - name: Run linting
#      run: |
#        uv run ruff check .
#{%- if formatter == "Ruff-format" %}
#        uv run ruff format --check .
#{%- elif formatter == "Black" %}
#        uv run black --check .
#{%- endif %}
#
#    - name: Run type checking
#      run: uv run mypy src/{{ package_import_name }}
-#}
{%- if development_environment == "strict" %}

    - name: Run security checks
      run: uv run pip-audit

{%- endif %}

  test-tox:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "{{ python_version }}"

    - name: Install uv
      uses: astral-sh/setup-uv@v7

    - name: Install tox
      run: uv tool install tox --with tox-uv

    - name: Run tox
      run: tox

{%- if use_pytest %}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

{%- endif %}
